<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>NexT + Valine躺坑之路</title>
      <link href="posts/a21b8f58/"/>
      <url>posts/a21b8f58/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>​    写了一段时间博客后，发现别人的文章有浏览次数以及评论功能★~★，这也某种程度上提高写 <em>Blog</em> 的动力，那我也来弄一个哈哈哈。。。</p><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>​    然而，事实总是那么折磨人。。。使用的是 <em>nexT</em> 主题的 <em>v8.2.1</em> 版本，按照网上的<a href="https://qianfanguojin.github.io/2019/07/23/Hexo%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6%EF%BC%9A%E4%B8%BANext%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0Valine%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/">教程</a>后一直没有达到最终的效果😭😭。</p><a id="more"></a><h4 id="问题1-使用-Valine-插件后，在页面上并没有显示具体的评论数量以及文章的浏览次数。"><a href="#问题1-使用-Valine-插件后，在页面上并没有显示具体的评论数量以及文章的浏览次数。" class="headerlink" title="问题1: 使用 Valine 插件后，在页面上并没有显示具体的评论数量以及文章的浏览次数。"></a>问题1: 使用 <em>Valine</em> 插件后，在页面上并没有显示具体的评论数量以及文章的浏览次数。</h4><p>具体原因：因为 <code>v8.2.1 版本已经将 Valine 功能去除掉了</code>。（详情见<a href="https://github.com/next-theme/hexo-theme-next/issues/188">官网解释</a>）也尝试了官网中的解决办法以及各种网上的方法，但是仍然无效。（瞎折腾了3个小时都没结果。。。气到内伤😭😭）</p><p>那就将版本降低到能使用的 <em>Valine</em> 的 <em>NexT</em> 版本呢？（如降低到<a href="https://github.com/theme-next/hexo-theme-next/releases/tag/v7.8.0">7.8.0</a>版本呢？？）<code>降低版本到7.8.0后，问题就解决了</code>。</p><h4 id="问题2-降低版本后，发现原来文章中中文导航又不能用了，英文的就没有问题。"><a href="#问题2-降低版本后，发现原来文章中中文导航又不能用了，英文的就没有问题。" class="headerlink" title="问题2: 降低版本后，发现原来文章中中文导航又不能用了，英文的就没有问题。"></a>问题2: 降低版本后，发现原来文章中中文导航又不能用了，英文的就没有问题。</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 点击中文标题导航栏时候，console控制台中报错，并且页面上没有跳转到对应的标题位置。</span>Cannot read property <span class="token string">'getBoundingClientRect'</span> <span class="token keyword">of</span> <span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>实际原因是:  <code>themes/next/source/js/utils.js</code> 中的代码存在遗漏，没有对中文进行URL解码。具体代码如下：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">...</span> <span class="token comment">// 其他多余代码省略</span><span class="token comment">// 在这个地方获取 event 的属性时候，中文的会被自动转成URI编码格式</span><span class="token comment">// href="#%E6%93%8D%E4%BD%9C%E6%AD%A5%E9%AA%A4" </span><span class="token comment">// 但文章中的Id仍然是中文的 &lt;h3 id="操作步骤">, 所以导致此处的target为null。</span><span class="token keyword">var</span> target <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> offset <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top <span class="token operator">+</span> window<span class="token punctuation">.</span>scrollY<span class="token punctuation">;</span><span class="token operator">...</span> <span class="token comment">// 其他多余代码省略</span><span class="token comment">// 解决办法：将上述代码替换如下代码即可。</span><span class="token keyword">var</span> str_id <span class="token operator">=</span> <span class="token function">decodeURI</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> target <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>str_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> offset <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top <span class="token operator">+</span> window<span class="token punctuation">.</span>scrollY<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此， 终于得到了自己想要的效果。。。（＋﹏＋）（＋﹏＋）</p><img src="https://i.loli.net/2021/02/09/vLhxcG8jZfyk46u.png" alt="valine_result.png" style="zoom:50%;" /><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​    很多时候遇到的问题，通过网上不一定能适用自己当前的场景，并不一定是别人的方式有问题。。。很可能是你的环境和别人的就不一样，所以<code>同样的操作不一定能解决同样现象的问题</code>。。。还是需要多排查定位看看主要的问题点在哪。</p>]]></content>
      
      
      <categories>
          
          <category> hexo建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog搭建 </tag>
            
            <tag> hexo建站 </tag>
            
            <tag> Valine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Py-spy解决Python程序Hang住问题</title>
      <link href="posts/cb61081b/"/>
      <url>posts/cb61081b/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>​    已经集成的接口自动化测试 Job 在周期性定时运行的时候，会很小概率出现一直卡在那里，原本应该3min就执行完成的任务，偶尔过了半个小时还没结束。（(￣３￣)直觉告诉我这个地方肯定有问题。。。</p><p>​    但由于复现的概率较小，一个月可能出现一次，所以开始并没有什么太大的线索（仅靠一些猜测并不切实际）。</p><p>​    终于！！！在某一个阳光明媚的大好日子，<strong>它重现了</strong>。</p><a id="more"></a><h3 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h3><ol><li><p>赶紧先登录到服务器上看看进程情况，发现此时存在脚本发起的2个 Worker CPU占用100%（由于用的 <code>Pytest + Pytest-xdist</code>  分布式插件执行用例），当时第一反应是死循环了？？</p><img src="https://i.loli.net/2021/01/22/AVhg7RGzYIfuWtN.png" alt="process_hang_1.png" style="zoom:50%;" /></li><li><p>通过<strong>perf</strong> 、<strong>ps</strong>或者 <strong>pstack</strong> 打印对应的pid， 看到的结果并没有什么太大用，反而<strong>误导我以为是代码里面的一个文件锁导致该问题</strong>。</p><img src="https://i.loli.net/2021/01/22/E1Yq9cjRo2GOx5e.png" alt="process_hang_2.png" style="zoom:50%;" /></li><li><p>网上查询了一通后，发现一个神奇的工具一一 <a href="https://www.zhihu.com/question/310832912">py-spy</a> （更多使用方法见 <a href="https://pypi.org/project/py-spy/">官网</a>）</p><p>安装后使用命令 ：选定一个异常的进程，执行命令： <code>py-spy  top --pid 19785</code> 打印结果如下，很明显看出来当前Cpu都卡在 <code>check_retry_status</code> 方法上面。</p><img src="https://i.loli.net/2021/01/22/CuRZJnsj13eTXoQ.png" alt="process_hang_3.png" style="zoom:50%;" /></li><li><p>查看该代码，发现该方法中存在一个while循环，并且很凑巧的是。。。╮(╯3╰)╭ 里面<font color=red><strong>没有兜底</strong></font>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 具体代码如下，过于相信传进来的 retry_flag 一定是1/2， 如果出现不是这两个值的时候，此时这个方法则进入了死循环。。。</span><span class="token keyword">def</span> <span class="token function">check_retry_status</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> atk<span class="token punctuation">,</span> order_id<span class="token punctuation">,</span> retry_flag<span class="token punctuation">,</span> devuuid<span class="token punctuation">)</span><span class="token punctuation">:</span>    max_count <span class="token operator">=</span> <span class="token number">5</span>    <span class="token keyword">while</span> max_count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> retry_flag <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        retry_flag <span class="token operator">=</span> functionA<span class="token punctuation">(</span>xxx<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>        max_count <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> retry_flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>          <span class="token keyword">return</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"验证充值订单失败"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>到这个地方，就很明显定位到了问题，在此处加上兜底并且加上对应日志记录functionA（<strong>第三方依赖</strong>）到底返回的是什么。（ 因为首次传入的 retry_flag 也是来自于functionA）</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​    写代码要谨慎。。。特别是结果来自第三方依赖的时候。。。<strong>一定要进行兜底！！！</strong></p><p>​    （emm… 兜一下总比不兜强）</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python Plugin </tag>
            
            <tag> py-spy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python调用gRPC接口</title>
      <link href="posts/2a44a0fd/"/>
      <url>posts/2a44a0fd/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>​    最近几个项目都是用的go语言编写的，使用的是 gRPC接口，是没有对外暴露http接口。但在部分场景下，由于可测性的需要必须直接调用 gRPC接口，达到数据的构造，所以需要通过 <code>Python</code> 代码完成调用服务器上的 gRPC接口 。</p><h3 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h3><p>​    由于网上相关最简单的demo已经是烂了一地。。。我这边就不再去重复写一段demo了（可参考当时我看的一篇<a href="https://cloud.tencent.com/developer/article/1557398">Blog</a>，或自行搜索相关前置准备）。</p><p>​    主要记录在实际过程中运用遇到的一些问题，希望能给大家一些帮助。</p><a id="more"></a><h4 id="步骤一：在执行转化脚本命令时候报错，具体信息如下："><a href="#步骤一：在执行转化脚本命令时候报错，具体信息如下：" class="headerlink" title="步骤一：在执行转化脚本命令时候报错，具体信息如下："></a>步骤一：在执行转化脚本命令时候报错，具体信息如下：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python -m grpc_tools.protoc -I. --python_out<span class="token operator">=</span>. --grpc_python_out<span class="token operator">=</span>. ./user.protogithub.com/gogo/protobuf/gogoproto/gogo.proto: File not found.base.proto: File not found.user.proto:7:1: Import <span class="token string">"github.com/gogo/protobuf/gogoproto/gogo.proto"</span> was not found or had errors.user.proto:8:1: Import <span class="token string">"base.proto"</span> was not found or had errors.user.proto:47:5: <span class="token string">"NullInt64"</span> is not defined.user.proto:59:5: <span class="token string">"NullInt64"</span> is not defined.user.proto:86:5: <span class="token string">"NullInt64"</span> is not defined.user.proto:239:5: <span class="token string">"NullInt64"</span> is not defined.user.proto:258:5: <span class="token string">"NullInt64"</span> is not defined.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>针对报错问题一个个分析。</p><h5 id="问题1-github-com-gogo-protobuf-gogoproto-gogo-proto-File-not-found。"><a href="#问题1-github-com-gogo-protobuf-gogoproto-gogo-proto-File-not-found。" class="headerlink" title="问题1: github.com/gogo/protobuf/gogoproto/gogo.proto: File not found。"></a>问题1: github.com/gogo/protobuf/gogoproto/gogo.proto: File not found。</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 由于转化的脚本中直接以如下方法引用的 gogo.proto 文件，但在转换的时候肯定是找不到的</span><span class="token keyword">import</span> <span class="token string">"github.com/gogo/protobuf/gogoproto/gogo.proto"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解决办法：</p><ol><li><p>将 <a href="https://github.com/gogo/protobuf/blob/master/gogoproto/gogo.proto">gogo.proto</a> 文件下载到本地，放到与需要转换的 user.proto 文件同级目录下;</p></li><li><p>修改 user.proto 的代码。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将如下代码修改成 import "gogo.proto"</span><span class="token function">import</span> <span class="token string">"github.com/gogo/protobuf/gogoproto/gogo.proto"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h5 id="问题2-base-proto-File-not-found。"><a href="#问题2-base-proto-File-not-found。" class="headerlink" title="问题2: base.proto: File not found。"></a>问题2: base.proto: File not found。</h5><p>解决方式同问题1，实际就将依赖的这个 base.proto 文件放到与需要转换的 user.proto 文件同级目录下即可。（<code>由于我的 base.proto 文件中也同问题1中一样引用了 gogo.proto，所以都需要重复问题1的步骤2</code>）</p><p>经过上面操作，终于将 user.proto 文件转成了对应的python脚本，具体样式如下。</p><img src="https://i.loli.net/2021/02/07/B8rjYhz1ZksDfiq.png" alt="python_convert_grpc.png" style="zoom:40%;" /><p>但你以为这就完事了？？(╯▔︹▔)╯ ， <code>Too young too simple</code></p><h4 id="步骤二：调用转换成python脚本的接口。"><a href="#步骤二：调用转换成python脚本的接口。" class="headerlink" title="步骤二：调用转换成python脚本的接口。"></a>步骤二：调用转换成python脚本的接口。</h4><p><em>注：由于无需本地启动一个服务端，所以可以简单点只写一个调用端即可（具体方式类似 <code>BloomRPC</code>，通过  <code>kubectl</code> 代理到远端的 <code>grpc</code>服务端， 具体原理可自行搜索）</em></p><p>在写客户端代码之前，就还存在一个隐藏问题。</p><h5 id="问题3-实际上如果在写客户端代码时候需要引用的其它的proto文件中的方法，则需要其它引用的文件也转成-python脚本（根据个人需要进行转换）。"><a href="#问题3-实际上如果在写客户端代码时候需要引用的其它的proto文件中的方法，则需要其它引用的文件也转成-python脚本（根据个人需要进行转换）。" class="headerlink" title="问题3: 实际上如果在写客户端代码时候需要引用的其它的proto文件中的方法，则需要其它引用的文件也转成 python脚本（根据个人需要进行转换）。"></a>问题3: 实际上如果在写客户端代码时候需要引用的其它的proto文件中的方法，则需要其它引用的文件也转成 python脚本（根据个人需要进行转换）。</h5><p>客户端代码大致如下（<em>我编写的demo中则无需转换其它文件</em>）：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> grpc<span class="token keyword">import</span> user_pb2_grpc<span class="token punctuation">,</span> user_pb2<span class="token keyword">class</span> <span class="token class-name">userService</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">get_mobile_by_id</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment"># 连接上本地的gRPC代理服务端, 端口为kubectl本地代理的端口</span>        channel <span class="token operator">=</span> grpc<span class="token punctuation">.</span>insecure_channel<span class="token punctuation">(</span><span class="token string">'localhost:6666'</span><span class="token punctuation">)</span>         <span class="token comment"># 根据对应服务初始化渠道</span>        test_stub <span class="token operator">=</span> user_pb2_grpc<span class="token punctuation">.</span>UserStub<span class="token punctuation">(</span>channel<span class="token punctuation">)</span>                  user_id <span class="token operator">=</span> <span class="token number">1234</span>        <span class="token comment"># 根据具体的 Request 定义来传入参数, 否则会报错</span>        <span class="token keyword">return</span> test_stub<span class="token punctuation">.</span>GetXxxById<span class="token punctuation">(</span>user_pb2<span class="token punctuation">.</span>GetXxxByIdRequest<span class="token punctuation">(</span>userId<span class="token operator">=</span>user_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>userService<span class="token punctuation">.</span>get_mobile_by_id<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 执行效果如下</span><span class="token punctuation">(</span>ENV<span class="token punctuation">)</span> ➜  demo_python_convert_grpc python user_client<span class="token punctuation">.</span>pymobileId<span class="token punctuation">:</span> <span class="token string">"11166668888"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 参数按照 user_pb2.py中方法Request定义的FieldDescriptor中具体的name来传入</span>fields<span class="token operator">=</span><span class="token punctuation">[</span>    _descriptor<span class="token punctuation">.</span>FieldDescriptor<span class="token punctuation">(</span>      name<span class="token operator">=</span><span class="token string">'userId'</span><span class="token punctuation">,</span> full_name      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    至此，整体调用 <code>gRPC接口</code> 的流程算是跑通了，后续就看各自业务需求来定制化了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​    最后吐槽下，很多时候准备做一件事的时候，发现网上教程挺多的，但是也会发现那些 “教程” 可能<strong>千篇一律</strong>。。。有些甚至一摸一样╮(╯Д╰)╭ 。。。当你真正按照这些 “教程” 来操作的时候又会发现可能不那么简单，所以说：<font color=blue><strong>实践是检验真理的唯一标准</strong> ！！！</font></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> gRPC接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Set命令</title>
      <link href="posts/cf736c07/"/>
      <url>posts/cf736c07/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>​    有时候在执行shell脚本的时候，在运行/调试的过程中会有些报错看起来不是太明显，那如何高效的调试自己编写的shell脚本呢？？</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>​    网上有一些解决方案，但是尝试了下后觉得使用 shell 中的 <strong>set</strong> 命令来解决更加方便和快捷。下面来看看 <strong>set</strong> 命令到底能够有哪些应用场景。</p><a id="more"></a><h4 id="（1）set-u"><a href="#（1）set-u" class="headerlink" title="（1）set -u"></a>（1）set -u</h4><p>​    执行脚本的时候，有时候会遇到变量未定义（如：拼写错误导致变量未定义），Bash 默认是忽略它并且继续执行的，在某些场景这可能会对后面的脚本造成不可预期的错误操作， 所以可以通过 <code>set -u</code> 来控制，具体案例如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/bash</span><span class="token builtin class-name">echo</span> <span class="token variable">$a</span><span class="token builtin class-name">echo</span> bar$ <span class="token function">bash</span> set_test.shbar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    可以看到，<code>echo $a</code> 输出了一个空行，Bash 忽略了不存在的 $a，然后继续执行 <code>echo bar</code>。大多数情况下，这不是开发者想要的行为，遇到变量不存在，脚本应该报错，而不是一声不响地往下执行。</p><p>通过脚本在头部加上 <code>set -u</code> 后，遇到不存在的变量就会报错，并停止执行。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/bash</span><span class="token builtin class-name">set</span> -u<span class="token builtin class-name">echo</span> <span class="token variable">$a</span><span class="token builtin class-name">echo</span> bar$ <span class="token function">bash</span> set_test.shset_test.sh: line <span class="token number">4</span>: a: unbound variable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（2）set-x"><a href="#（2）set-x" class="headerlink" title="（2）set -x"></a>（2）set -x</h4><p>​    在执行复杂脚本的时候，需要对脚本进行类似debug一样的操作，则可以通过设置 <code>set -x</code>，这样就会对脚本中的执行过程的变量以及具体执行的代码进行输出。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/bash</span><span class="token builtin class-name">set</span> -x<span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"tester"</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$&#123;name&#125;</span> <span class="token operator">==</span> <span class="token string">"tester"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> <span class="token string">"hello"</span><span class="token keyword">else</span>  <span class="token builtin class-name">echo</span> <span class="token string">"failed..."</span><span class="token keyword">fi</span><span class="token builtin class-name">echo</span> end$ <span class="token function">bash</span> set_test.sh+ <span class="token assign-left variable">name</span><span class="token operator">=</span>tester+ <span class="token punctuation">[</span><span class="token punctuation">[</span> tester <span class="token operator">==</span> <span class="token punctuation">\</span>t<span class="token punctuation">\</span>e<span class="token punctuation">\</span>s<span class="token punctuation">\</span>t<span class="token punctuation">\</span>e<span class="token punctuation">\</span>r <span class="token punctuation">]</span><span class="token punctuation">]</span>+ <span class="token builtin class-name">echo</span> hellohello+ <span class="token builtin class-name">echo</span> endend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    可以看到，在进行条件判断的时候，变量name被具体值替换了，打印了代码走到了条件分支的哪一步，以及打印了相应的有输出的代码行，行首以+表示。这对于调试复杂的脚本是很有用的。</p><h4 id="（3）set-e"><a href="#（3）set-e" class="headerlink" title="（3）set -e"></a>（3）set -e</h4><p>​    如果脚本里面有运行失败的命令（返回值非0），Bash 默认会继续执行后面的命令，在实际开发中，这种会导致比较严重的影响。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/bash</span>foo<span class="token builtin class-name">echo</span> bar$ <span class="token function">bash</span> set_test.shset_test.sh: line <span class="token number">5</span>: foo: <span class="token builtin class-name">command</span> not foundbar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过使用 <code>set -e</code> 则可以运行失败的命令就直接退出。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/bash</span><span class="token builtin class-name">set</span> -efoo<span class="token builtin class-name">echo</span> bar$ <span class="token function">bash</span> set_test.shset_test.sh: line <span class="token number">6</span>: foo: <span class="token builtin class-name">command</span> not found<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以通过下面的方式来指定具体某个代码块运行失败后自动退出。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> -e      <span class="token comment"># 表示打开遇到运行命令返回非0则退出</span>command1command2<span class="token builtin class-name">set</span> +e      <span class="token comment"># 表示关闭遇到运行命令返回非0则退出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（4）set-o-pipefail"><a href="#（4）set-o-pipefail" class="headerlink" title="（4）set -o pipefail"></a>（4）set -o pipefail</h4><p>​    <code>set -e</code> 有一个例外情况，就是不适用于管道命令。Bash 会把<strong>最后一个子命令的返回值</strong>，作为<strong>整个命令的返回值</strong>。也就是说，只要最后一个子命令不失败，管道命令总是会执行成功，因此它后面命令依然会执行，<code>set -e</code> 就失效了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/bash</span><span class="token builtin class-name">set</span> -efoo <span class="token operator">|</span> <span class="token builtin class-name">echo</span> a<span class="token builtin class-name">echo</span> bar$ <span class="token function">bash</span> set_test.shset_test.sh: line <span class="token number">7</span>: foo: <span class="token builtin class-name">command</span> not foundabar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    上面代码中，<strong>foo</strong>是一个不存在的命令，但是 <code>foo | echo a</code> 这个管道命令会执行成功，导致后面的 <code>echo bar</code> 会继续执行。</p><p>​     <code>set -eo pipefail</code> 用来解决这种情况，只要一个子命令失败，整个管道命令就失败，脚本会在该管道执行完后终止执行。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/bash</span><span class="token builtin class-name">set</span> -eo pipefailfoo <span class="token operator">|</span> <span class="token builtin class-name">echo</span> a<span class="token builtin class-name">echo</span> bar$ <span class="token function">bash</span> set_test.shset_test.sh: line <span class="token number">7</span>: foo: <span class="token builtin class-name">command</span> not founda<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    可以看出，管道任务失败后，echo bar则未进行执行。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​    set命令的上面这四个参数，一般都放在一起使用，常用的两种方式如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 写法一</span><span class="token builtin class-name">set</span> -euxo pipefail<span class="token comment"># 写法二</span><span class="token builtin class-name">set</span> -eux<span class="token builtin class-name">set</span> -o pipefail<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell 脚本调试 </tag>
            
            <tag> Linux 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo之优化（一）</title>
      <link href="posts/a3ff5801/"/>
      <url>posts/a3ff5801/</url>
      
        <content type="html"><![CDATA[<p>​    继上一篇搭建完最基础的Hexo环境并且发布一篇Demo文章后，基本上能满足了平时的个人Blog编写以及发布，但很多地方还是用户体验不太好，于是再对自己的Blog进行一系列的优化😁😁。</p><h4 id="优化一：Hexo-主题优化"><a href="#优化一：Hexo-主题优化" class="headerlink" title="优化一：Hexo 主题优化"></a>优化一：Hexo 主题优化</h4><p>​    网上搜了下大部分都用的 <a href="https://github.com/next-theme/hexo-theme-next">nexT</a> 这个主题，于是就直接参照对应的 <a href="https://theme-next.js.org/docs/getting-started/">官网链接</a> 操作即可。（顺便继续记录一些遇到的坑~~）如果觉得默认的主题已经不错了的可以直接跳过改步骤（<strong>但后续优化<font color=red>基于nexT v8.2.1版本优化</font>，不一定全部通用于其他主题</strong>）。</p><a id="more"></a><ul><li><p><strong>问题1: 由于官网是英文版，在网上搜索中文版本代码过老导致启动进入 localhost:4000页面仅展示如下错误内容。</strong></p><p>如果你看的教程是 <code>https://theme-next.iissnan.com/getting-started.html</code>，那么就要注意了，该链接中的nexT代码过于老旧了，可能会存在一定的问题，建议使用 <a href="https://theme-next.js.org/docs/getting-started/">官网链接</a> 。</p></li></ul><p><strong>参照最新版的教程修改完主题后，最新的样式就如下图：</strong></p><img src="https://i.loli.net/2021/02/03/1jk4csEovyJWgnM.png" alt="hexo_default.png" style="zoom:30%;" /><p>​    这个时候问题来了，<strong>如果每篇文章都如上，篇幅比较长，那么就导致首页每次展示的文章数量过少。</strong></p><h4 id="优化二：文章折叠展示-对文章添加分类、标签等"><a href="#优化二：文章折叠展示-对文章添加分类、标签等" class="headerlink" title="优化二：文章折叠展示 + 对文章添加分类、标签等"></a>优化二：文章折叠展示 + 对文章添加分类、标签等</h4><ul><li><p>步骤一：修改nexT主题目录下的_config.yml配置 (将文件中的注释去掉即可)。</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">menu:  home: &#x2F; || home  about: &#x2F;about || user  tags: &#x2F;tags || tags  categories: &#x2F;categories || th  archives: &#x2F;archives || archive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>步骤二：给文章添加对应的属性（如：tags、categories、description）。</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">title: Hexo 首次搭建个人Blog 问题记录（一）date: 2021-02-01 22:14:05tags: - blog搭建 - hexo建站categories: hexo建站<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>问题2：设置首页新增了 <code>tags 和 categories</code> 页后，点击进入到对应的 tags 或者 categories 的时候没有想要的内容， 仅仅一个 tags 或者 categories 标签。</strong></p><p>原因: 在执行 <code>hexo new page &quot;tags&quot;</code> 这一步自动生成的index.md 文件中内容缺失导致。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 解决办法如下操作，打开对应的 blog_dir/source/tags/index.md 文件, 在最后补充如下代码</span>type: <span class="token string">"tags"</span><span class="token comment"># about/categories页操作将tags替换成about/categories即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>步骤三：文章折叠的<a href="http://theme-next.iissnan.com/faqs.html#%E9%A6%96%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E5%BD%95">解决办法</a> (个人选择了方法一)</p></li></ul><p>优化完后的效果如下：</p><img src="https://i.loli.net/2021/02/03/1I6TEuywBj2QG7R.png" alt="nexT_first.png" style="zoom:40%;" /><h4 id="优化三：-文章生成短链接"><a href="#优化三：-文章生成短链接" class="headerlink" title="优化三： 文章生成短链接"></a>优化三： 文章生成短链接</h4><p>点开上图的阅读全文后，发现整体的链接是一大串文字，这个时候看起来就比较怪异，并且复制出来后直接会是URL编码的格式。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">https://beanskingdom.github.io/2021/02/01/Hexo-首次搭建遇到的问题/#morehttps://beanskingdom.github.io/2021/02/01/Hexo-%E9%A6%96%E6%AC%A1%E6%90%AD%E5%BB%BA%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/#more<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时可以通过Hexo-abbrlink生成唯一永久文章链接（<a href="https://github.com/Rozbo/hexo-abbrlink">参考链接</a>）。 </p><p>最终的效果则为：<code>xxx/posts/48255dc8/#more</code></p><h4 id="优化四：修改文内链接样式"><a href="#优化四：修改文内链接样式" class="headerlink" title="优化四：修改文内链接样式"></a>优化四：修改文内链接样式</h4><p>nexT默认文章链接样式如下图：</p><img src="https://i.loli.net/2021/02/03/q2CwmFHZsNoyYlW.png" alt="next_link_style.png" style="zoom:40%;" /><p>为了突出区别性，我们在对应文件中添加下列的代码即可。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector"># themes/next/source/css/_common/components/post/post-body.styl.post-body p a</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #0593d3<span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid #0593d3<span class="token selector">;    &amp;:hover</span> <span class="token punctuation">&#123;</span>        <span class="token property">color</span><span class="token punctuation">:</span> #fc6423<span class="token punctuation">;</span>        <span class="token property">border-bottom</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid #fc6423<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优化后的样式如下：</p><img src="https://i.loli.net/2021/02/03/L4j9vFUxBl2o3cM.png" alt="next_link_update.png" style="zoom:40%;" /><h4 id="优化五：给主页文章添加阴影效果"><a href="#优化五：给主页文章添加阴影效果" class="headerlink" title="优化五：给主页文章添加阴影效果"></a>优化五：给主页文章添加阴影效果</h4><p>打开<code>themes/next/source/css/_common/components/post/index.styl</code>文件，将<code>post-block</code>代码进行如下更改：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">if (hexo-config('motion.transition.post_block'))</span> <span class="token punctuation">&#123;</span>  <span class="token selector"># 添加如下代码    .post-block</span><span class="token punctuation">&#123;</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>        <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>0.9<span class="token punctuation">)</span> none repeat scroll <span class="token important">!important</span><span class="token punctuation">;</span> //添加透明效果        <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> 0 0 5px <span class="token function">rgba</span><span class="token punctuation">(</span>202<span class="token punctuation">,</span> 203<span class="token punctuation">,</span> 203<span class="token punctuation">,</span> .5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">-moz-box-shadow</span><span class="token punctuation">:</span> 0 0 5px <span class="token function">rgba</span><span class="token punctuation">(</span>202<span class="token punctuation">,</span> 203<span class="token punctuation">,</span> 204<span class="token punctuation">,</span> .5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="优化六：文章内部的导航栏位置优化"><a href="#优化六：文章内部的导航栏位置优化" class="headerlink" title="优化六：文章内部的导航栏位置优化"></a>优化六：文章内部的导航栏位置优化</h4><p>默认文章内部的导航栏位置是在左侧，看文章时候比较怪异，所以优化到了右边。</p><p>打开 <code>themes/next/_config.yml</code> 文件，将如下代码修改。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sidebar:  <span class="token comment"># Sidebar Position.</span>  <span class="token comment"># position: left# 将改行注释掉，再去掉下面一行的注释</span>  position: right<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="优化七：给文章末尾添加结束语"><a href="#优化七：给文章末尾添加结束语" class="headerlink" title="优化七：给文章末尾添加结束语"></a>优化七：给文章末尾添加结束语</h4><ul><li><p>在 <code>themes/next/layout/_macro</code> 中新建 <code>passage-end-tag.swig</code> 文件，添加代码至该文件中；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token punctuation">&#123;</span>% <span class="token keyword">if</span> not is_index %<span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span>div <span class="token assign-left variable">style</span><span class="token operator">=</span><span class="token string">"text-align:center;color: #ccc;font-size:20px;"</span><span class="token operator">></span>------------- 本 文 结 束 <span class="token operator">&lt;</span>i <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">"fa fa-paw"</span><span class="token operator">></span><span class="token operator">&lt;</span>/i<span class="token operator">></span> 感 谢 您 的 阅 读 -------------<span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token punctuation">&#123;</span>% endif %<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>打开 <code>themes/next/layout/_macro/post.njk</code> 文件，在 post-body 后，post-footer 前，添加下面内容:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>div<span class="token operator">></span>  <span class="token punctuation">&#123;</span>% <span class="token keyword">if</span> not is_index %<span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span>% include <span class="token string">'passage-end-tag.swig'</span> %<span class="token punctuation">&#125;</span>  <span class="token punctuation">&#123;</span>% endif %<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token comment"># 在如下内容之前添加上述代码</span><span class="token comment">#    &#123;#####################&#125;</span><span class="token comment">#    &#123;### END POST BODY ###&#125;</span><span class="token comment">#    &#123;#####################&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在主题配置文件 <code>_config.yml</code> 在末尾添加：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># 文章末尾添加“本文结束”标记passage_end_tag:  enabled: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="优化八：给代码块添加复制功能"><a href="#优化八：给代码块添加复制功能" class="headerlink" title="优化八：给代码块添加复制功能"></a>优化八：给代码块添加复制功能</h4><p>打开 <code>themes/next/_config.yml</code> 主题配置文件，搜索 codeblock ,开启复制，修改代码如下。</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">copy_button:  enable: true# 显示复制按钮  # Available values: default | flat | mac  style: flat# 复制按钮展示形式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="优化九：实现统计功能"><a href="#优化九：实现统计功能" class="headerlink" title="优化九：实现统计功能"></a>优化九：实现统计功能</h4><p>在根目录下安装 <code>hexo-wordcount</code>,运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-wordcount --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在主题的配置文件中，配置如下：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"># Post wordcount display settings# Dependencies: https:&#x2F;&#x2F;github.com&#x2F;willin&#x2F;hexo-wordcountpost_wordcount:  item_text: true  wordcount: true  min2read: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>​    至此，部分个人体验相关的优化已经结束，这个时候可以开心的写blog了，自己看起来效果也不错，但这样你满足了么？？</p><p>​    当然不满意啦！！！ 至少要看到有多少人来看我的blog吧？😄😄静待后续优化。</p>]]></content>
      
      
      <categories>
          
          <category> hexo建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog搭建 </tag>
            
            <tag> hexo建站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 首次搭建个人Blog问题记录</title>
      <link href="posts/48255dc8/"/>
      <url>posts/48255dc8/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>​    看到别人那么炫酷的个人Blog后，自己也突然有了一些想法，既而最近看了《小强升职记》中的第五章让目标落地，于是便马上开始规划起了自己的Blog。</p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>​    通过这个Blog记录生活中的点点滴滴。</p><a id="more"></a><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>​    由于这类型的文章在网上太多了。。。具体的搭建过程就不一一搬运了。（个人觉得比较详细的一个链接：<a href="https://www.cnblogs.com/shwee/p/11421156.html">Hexo+Github: 个人博客网站搭建完全教程(看这篇就够了)</a>）</p><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>​    emm…有一个比较详细的教程是多么重要的一件事，虽然别人的Blog上看起来也就1个小时的事，实际自己做起来却花费了大半天😭😭。。。总结了以下在搭建过程中自己遇到的坑。</p><ol><li><p><strong>执行修改_config.yml文件后，执行创建新的文章命令时候报错。</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token string">"Bigbean's demo"</span>FATAL TypeError: Invalid config detected: <span class="token string">"url"</span> should be string, not object<span class="token operator">!</span>原因：拷贝其他教程的配置文件时候，url:  <span class="token comment">#网址 这个地方未配置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>发布了第一篇文章后，页面打开显示错误。</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 终端里面报错 </span>WARN  No layout: index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>原因：在步骤3中按照参考链接中改了配置后，实际并没有链接中的那个主题 <code>theme: landscape-plus</code>， </p><p>所以<font color=red><strong>修改_config.yml配置文件的时候一定要注意！！！再次提醒不要全部照抄，应该仅仅是改自己需要改的地方。</strong></font></p></li><li><p><strong>在执行 <code>hexo d</code> 发布的时候报错。</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Deployer not found: <span class="token function">git</span><span class="token comment"># 这是因为没安装hexo-deployer-git插件，在站点目录下输入下面的插件安装就好了</span><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>怎么再通过github的链接直接访问网上远端的效果呢？</strong></p><p>进入 github 项目中点击 Settings，向下拉到最后有个 GitHub Pages，点击 Choose a theme 选择一个主题。然后等一会儿，再回到 GitHub Pages，就会变成你选择的主题。<a href="https://zhuanlan.zhihu.com/p/35668237">参考链接</a></p></li><li><p><strong>按照6中的操作后，github page一直未被识别，导致点击链接去看里面样式找不到。（<a href="https://www.cnblogs.com/shwee/p/11421156.html">参考链接</a>）</strong></p><p>原因： 要创建一个和你用户名相同的仓库，后面加 <strong>.github.io</strong>，只有这样，将来要部署到 <code>GitHub page</code> 的时候，才会被识别 。例如我的：<a href="https://beanskingdom.github.io/">beanskingdom.github.io</a></p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​        至此。。。终于完成了第一篇内容的发布，后续还会继续进行相关的优化，如：主题、评论、搜索等等。</p>]]></content>
      
      
      <categories>
          
          <category> hexo建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog搭建 </tag>
            
            <tag> hexo建站 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
